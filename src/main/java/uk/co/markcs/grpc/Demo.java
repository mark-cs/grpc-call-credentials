package uk.co.markcs.grpc;

import io.grpc.Channel;
import io.grpc.ManagedChannelBuilder;
import io.grpc.Server;
import io.grpc.StatusRuntimeException;
import io.grpc.netty.shaded.io.grpc.netty.NettyServerBuilder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;

public class Demo {

    private static final Logger logger = LoggerFactory.getLogger(Demo.class);

    public static void main(final String[] args) throws IOException {
        // Create the Token Authentication Services
        final AuthenticationService authenticationService = new AuthenticationService("secret");
        final AuthenticationService alternateAuthenticationService = new AuthenticationService("shh!");

        // Start server
        logger.info("Creating server");
        final Server server = NettyServerBuilder
                .forPort(8080)
                .intercept(new AuthenticationInterceptor(authenticationService))
                .addService(new GreeterServer())
                .build();
        logger.info("Starting server");
        server.start();
        logger.info("Server started");

        // Build client
        logger.info("Creating stub");
        final Channel channel = ManagedChannelBuilder
                .forAddress("localhost", 8080)
                .usePlaintext()
                .build();
        final GreeterGrpc.GreeterBlockingStub stub = GreeterGrpc.newBlockingStub(channel);
        logger.info("Stub created");

        // Call server with token generated by the right authentication service
        System.out.println("Calling service as alice");
        final GreetResponse firstGreetResponse = stub
                .withCallCredentials(new AuthenticationCallCredentials(authenticationService.generateToken("alice")))
                .greet(GreetRequest.newBuilder().setName("alice").build());
        System.out.println(firstGreetResponse.getMessage());

        // Call server without using call credentials
        System.out.println("Calling service without call credentials");
        try {
            final GreetResponse secondGreetResponse = stub
                    .greet(GreetRequest.newBuilder().setName("alice").build());
        } catch(final StatusRuntimeException e) {
            System.out.println("Status exception: " + e.getStatus().toString());
        }

        // Call server with token generated by an alternate authentication service
        System.out.println("Calling service as alice but with an invalid token");
        try {
            final GreetResponse secondGreetResponse = stub
                    .withCallCredentials(new AuthenticationCallCredentials(alternateAuthenticationService.generateToken("alice")))
                    .greet(GreetRequest.newBuilder().setName("alice").build());
        } catch(final StatusRuntimeException e) {
            System.out.println("Status exception: " + e.getStatus().toString());
        }

        logger.info("Shutting down server");
        server.shutdown();
        logger.info("Server shutdown");
    }

}
